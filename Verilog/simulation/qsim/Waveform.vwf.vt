// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/15/2021 10:03:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DCalles_Lab6_Adders
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DCalles_Lab6_Adders_vlg_vec_tst();
// constants                                           
// general purpose registers
reg activate;
reg clk;
reg [7:0] input8;
reg reset;
reg selector;
// wires                                               
wire carryOut;
wire [15:0] memoryOut;
wire [6:0] segmentL1;
wire [6:0] segmentL2;
wire [6:0] segmentR1;
wire [6:0] segmentR2;
wire [6:0] segmentSumL;
wire [6:0] segmentSumR;

// assign statements (if any)                          
DCalles_Lab6_Adders i1 (
// port map - connection between master ports and signals/registers   
	.activate(activate),
	.carryOut(carryOut),
	.clk(clk),
	.input8(input8),
	.memoryOut(memoryOut),
	.reset(reset),
	.segmentL1(segmentL1),
	.segmentL2(segmentL2),
	.segmentR1(segmentR1),
	.segmentR2(segmentR2),
	.segmentSumL(segmentSumL),
	.segmentSumR(segmentSumR),
	.selector(selector)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// activate
initial
begin
	activate = 1'b1;
	activate = #110000 1'b0;
	activate = #40000 1'b1;
	activate = #120000 1'b0;
	activate = #40000 1'b1;
	activate = #120000 1'b0;
	activate = #40000 1'b1;
	activate = #120000 1'b0;
	activate = #40000 1'b1;
end 

// selector
initial
begin
	repeat(3)
	begin
		selector = 1'b0;
		selector = #160000 1'b1;
		# 160000;
	end
	selector = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #360000 1'b0;
	reset = #40000 1'b1;
	reset = #270000 1'b0;
	reset = #110000 1'b1;
end 
// input8[ 7 ]
initial
begin
	input8[7] = 1'b0;
	input8[7] = #190000 1'b1;
	input8[7] = #160000 1'b0;
end 
// input8[ 6 ]
initial
begin
	input8[6] = 1'b1;
	input8[6] = #350000 1'b0;
end 
// input8[ 5 ]
initial
begin
	input8[5] = 1'b1;
	input8[5] = #520000 1'b0;
end 
// input8[ 4 ]
initial
begin
	input8[4] = 1'b1;
	input8[4] = #190000 1'b0;
	input8[4] = #160000 1'b1;
	input8[4] = #620000 1'b0;
end 
// input8[ 3 ]
initial
begin
	input8[3] = 1'b1;
	input8[3] = #190000 1'b0;
	input8[3] = #160000 1'b1;
	input8[3] = #620000 1'b0;
end 
// input8[ 2 ]
initial
begin
	input8[2] = 1'b0;
	input8[2] = #350000 1'b1;
	input8[2] = #620000 1'b0;
end 
// input8[ 1 ]
initial
begin
	input8[1] = 1'b0;
	input8[1] = #350000 1'b1;
	input8[1] = #620000 1'b0;
end 
// input8[ 0 ]
initial
begin
	input8[0] = 1'b0;
	input8[0] = #190000 1'b1;
	input8[0] = #330000 1'b0;
end 
endmodule

